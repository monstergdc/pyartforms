#! /usr/bin/env python
# -*- coding: utf-8 -*-

# PyArtForms - Python generative art forms paint algorithms (artificial artist), v1.0
# (c)2017-2024 Noniewicz.com, Jakub Noniewicz aka MoNsTeR/GDC
# color definitions, and color mappers/functions
"""
upd: 20210611, 13
upd: 20240511, 12
"""

import random
from drawtools import *


# white yellow red lb1 lb2 blue ltgray gray
colors_happy = [(255,255,255), (0xEC, 0xD1, 0x27), (0xD1, 0x3B, 0x29), (0x7F, 0xAE, 0xAD), (0x41, 0x8D, 0xB0), (0x29, 0x56, 0x80), (0xB0, 0xB0, 0xB0), (0x90, 0x90, 0x90)]
# same but no white
colors_happy_nw7 = [(0xEC, 0xD1, 0x27), (0xD1, 0x3B, 0x29), (0x7F, 0xAE, 0xAD), (0x41, 0x8D, 0xB0), (0x29, 0x56, 0x80), (0xB0, 0xB0, 0xB0), (0x90, 0x90, 0x90)]
# white yellow red blue
colors_fwd = [(255,255,255), (0xEC, 0xD1, 0x27), (0xD1, 0x3B, 0x29), (0x20, 0x50, 0xA0)]
# ?
colors_fwd_nw6 = [(0xEC, 0xD1, 0x27), (0xD1, 0x3B, 0x29), (0x20, 0x50, 0xA0), (0xEC, 0xD1, 0x27), (0xD1, 0x3B, 0x29), (0x20, 0x50, 0xA0)]
# black gray*2 orange
colors_bgo = [(0x0, 0x0, 0x0), (0xc0, 0xc0, 0xc0), (0x80, 0x80, 0x80), (0xfa, 0x60, 0x00)]
# avatar (3 blue, 3 green, 2 magenta)
colors_avatar = [(0x0, 0x0, 0xff), (0x40, 0x40, 0xff), (0x00, 0xff, 0xff), (0x00, 0xe0, 0xb0), (0x40, 0xff, 0x40), (0x00, 0xc0, 0x00), (0xff, 0x80, 0xff), (0xc0, 0x00, 0xc0)]
# bw (white, gray) x2
colors_bw = [(0xff, 0xff, 0xff), (0xc0, 0xc0, 0xc0), (0xff, 0xff, 0xff), (0xc0, 0xc0, 0xc0)]
# bw (white, black) x2
colors_bw0 = [(0xff, 0xff, 0xff), (0x00, 0x00, 0x00), (0xff, 0xff, 0xff), (0x00, 0x00, 0x00)]
# bw (white, gray*2, black)
colors_bwx = [(0xff, 0xff, 0xff), (0xc0, 0xc0, 0xc0), (0x80, 0x80, 0x80), (0x00, 0x00, 0x00)]
# pastel psychedelic
colors_p = [(0x78, 0xE6, 0x7B), (0x8F, 0x60, 0xEE), (0xFE, 0x7B, 0x65), (0xE7, 0x5F, 0xE5), (0x7B, 0xA4, 0xE0), (0xFF, 0x9C, 0x6B), (0xEB, 0xDD, 0x67), (0xFA, 0x60, 0x93)]
# magic blue with little green (better for print?)
colors_b = [(0x00, 0x10, 0x20), (0x00, 0x20, 0x40), (0x00, 0x30, 0x60), (0x00, 0x40, 0x80), (0x00, 0x50, 0xA0), (0x00, 0x60, 0xC0), (0x00, 0x70, 0xE0), (0x00, 0x80, 0xFF)]
# just yellow
colors_y = [(0x20, 0x20, 0x00), (0x40, 0x40, 0x00), (0x60, 0x60, 0x00), (0x80, 0x80, 0x00), (0xA0, 0xA0, 0x00), (0xC0, 0xC0, 0x00), (0xE0, 0xE0, 0x00), (0xFF, 0xFF, 0x00)]
# yellow orange red blue
colors_yorb = [(0xEC, 0xD1, 0x27), (0xfa, 0x60, 0x00), (0xD1, 0x3B, 0x29), (0x20, 0x80, 0xd8)]
# gits orange magenta pink gray-ish brown-ish
colors_gits = [(0xEE, 0x87, 0x3F), (0x77, 0x2D, 0xAB), (0xEB, 0xA0, 0xF0), (0x34, 0x39, 0x49), (0x6E, 0x61, 0x50)]

# https://digitalsynopsis.com/design/beautiful-color-palettes-combinations-schemes/
# by 5 + opt whites/~black + more
colors_BeachTowels = [(0xfe, 0x4a, 0x49), (0x2a, 0xb7, 0xca), (0xfe, 0xd7, 0x66), (0xe6, 0xe6, 0xea), (0xf4, 0xf4, 0xf8), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_MoonlightBytes6 = [(0x4a, 0x4e, 0x4d), (0x0e, 0x9a, 0xa7), (0x3d, 0xa4, 0xab), (0xf6, 0xcd, 0x61), (0xfe, 0x8a, 0x71), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_Number3 = [(0x2a, 0x4d, 0x69), (0x4b, 0x86, 0xb4), (0xad, 0xcb, 0xe3), (0xe7, 0xef, 0xf6), (0x63, 0xac, 0xe5), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_RainbowDash = [(0xee, 0x40, 0x35), (0xf3, 0x77, 0x36), (0xfd, 0xf4, 0x98), (0x7b, 0xc0, 0x43), (0x03, 0x92, 0xcf), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_Google = [(0x00, 0x87, 0x44), (0x00, 0x57, 0xe7), (0xd, 0x62d, 0x20), (0xff, 0xa7, 0x00), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_MetroUI = [(0xd1, 0x11, 0x41), (0x00, 0xb1, 0x59), (0x00, 0xae, 0xdb), (0xf3, 0x77, 0x35), (0xff, 0xc4, 0x25), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_ProgramCat = [(0xed, 0xc9, 0x51), (0xeb, 0x68, 0x41), (0xcc, 0x2a, 0x36), (0x4f, 0x37, 0x2d), (0x00, 0xa0, 0xb0), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_SkinTones = [(0x8d, 0x55, 0x24), (0xc6, 0x86, 0x42), (0xe0, 0xac, 0x69), (0xf1, 0xc2, 0x7d), (0xff, 0xdb, 0xac), (0xff, 0xff, 0xff), (0x20, 0x20, 0x20)]
colors_Rainbow = [(0xFF, 0x80, 0xFF), (0x80, 0x80, 0xFF), (0x80, 0xFF, 0xFF), (0x80, 0xFF, 0x80), (0xFF, 0xFF, 0x80), (0xFF, 0x80, 0x80)]

colors_BrGrRd = [(0x52, 0x12, 0x13), (0x59, 0x74, 0x92), (0x9E, 0x13, 0x10), (0xBA, 0x8B, 0x55), (0xDB, 0xAA, 0x72), (0xFF, 0xFF, 0xFF)]

C_0 = 192
C_1 = 252
#colors_ZXC0 = [(0,0,0), (0,0,C_0), (C_0,0,0), (C_0,0,C_0), (0,C_0,0), (0,C_0,C_0), (C_0,C_0,0), (C_0,C_0,C_0)]
#colors_ZXC1 = [(0,0,0), (0,0,C_1), (C_1,0,0), (C_1,0,C_1), (0,C_1,0), (0,C_1,C_1), (C_1,C_1,0), (C_1,C_1,C_1)]
colors_ZXC0 = [(0,0,C_0), (C_0,0,0), (C_0,0,C_0), (0,C_0,0), (0,C_0,C_0), (C_0,C_0,0)]
colors_ZXC1 = [(0,0,C_1), (C_1,0,0), (C_1,0,C_1), (0,C_1,0), (0,C_1,C_1), (C_1,C_1,0)]

# ---

def old_colorer(params):
    r = 0
    g = 0
    b = 0
    if 'r1' in params and 'r0' in params: 
        if params['r1'] > 0:
            r = random.randint(params['r0'], params['r1'])
    if 'g1' in params and 'g0' in params: 
        if params['g1'] > 0:
            g = random.randint(params['g0'], params['g1'])
    if 'b1' in params and 'b0' in params: 
        if params['b1'] > 0:
            b = random.randint(params['b0'], params['b1'])
    return (r, g, b)

def get_colors(mode):
    ca = None
    if mode == 'blueMap':
        ca = colors_b
    if mode == 'happy':
        ca = colors_happy
    if mode == 'wryb':
        ca = colors_fwd
    if mode == 'bgo':
        ca = colors_bgo
    if mode == 'yorb':
        ca = colors_yorb
    if mode == 'gits':
        ca = colors_gits
    if mode == 'avatar':
        ca = colors_avatar
    if mode == 'psych':
        ca = colors_p
    if mode == 'bw0':
        ca = colors_bw0
    if mode == 'bwx':
        ca = colors_bwx
    if mode == 'BeachTowels':
        ca = colors_BeachTowels
    if mode == 'MoonlightBytes6':
        ca = colors_MoonlightBytes6
    if mode == 'Number3':
        ca = colors_Number3
    if mode == 'RainbowDash':
        ca = colors_RainbowDash
    if mode == 'Google':
        ca = colors_Google
    if mode == 'MetroUI':
        ca = colors_MetroUI
    if mode == 'ProgramCat':
        ca = colors_ProgramCat
    if mode == 'SkinTones':
        ca = colors_SkinTones
    if mode == 'Rainbow':
        ca = colors_Rainbow
    if mode == 'BrGrRd':
        ca = colors_BrGrRd
    if mode == 'colors_ZXC1':
        ca = colors_ZXC1
    return ca

def new_colorer(mode, n, cnt):
    if mode == 'black_const':
        return (0,0,0)
    if mode == 'white_const':
        return (255,255,255)
    if mode == 'red_const':
        return (255,0,0)
    if mode == 'green_const':
        return (8,255,48)
    if mode == 'blue_const':
        return (16,48,255)
    if mode == 'red':
        color = gradient2((0,0,0), (255,0,0), n, cnt)
        return color
    if mode == 'green':
        color = gradient2((0,56,0), (0,255,48), n, cnt)
        return color
    if mode == 'blue':
        color = gradient2((0,16,56), (0,128,255), n, cnt)
        return color
    if mode == 'bg':
        color = gradient2((32,64,64), (64,255,255), n, cnt)
        return color
    if mode == 'rg':
        color = gradient2((255,0,0), (255,255,0), n, cnt)
        return color
    if mode == 'gb':
        color = gradient2((64,255,64), (64,64,255), n, cnt)
        return color
    if mode == 'bw':
        color = gradient2((0,0,0), (255,255,255), n, cnt)
        return color
    if mode == 'any_rnd':
        r = random.randint(64, 256)
        g = random.randint(64, 256)
        b = random.randint(64, 256)
        return (r, g, b)
    if mode == 'red_rnd':
        r = random.randint(0, 256)
        return (r, 0, 0)
    if mode == 'green_rnd':
        r = random.randint(0, 32)
        g = random.randint(64, 256)
        b = random.randint(0, 32)
        return (r, g, b)
    if mode == 'blue_rnd':
        r = random.randint(16, 128)
        g = random.randint(64, 256)
        b = random.randint(128, 256)
        return (r, g, b)

    ca = get_colors(mode)
    try:
        ca
    except NameError:
        return (0,0,0)
    alen = len(ca)
    color = ca[n%alen]
    return color

def add_alpha(color, alpha):
    return (color[0], color[1], color[2], alpha)

